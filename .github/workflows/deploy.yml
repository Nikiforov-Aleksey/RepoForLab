name: Webbooks CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  S3_ENDPOINT: 'storage.yandexcloud.net'
  S3_BUCKET: 'webbooks-artifacts'
  PROJECT_DIR: 'apps/webbooks'
  TF_VM_IP: '158.160.184.242'
  TF_SSH_KEY: ${{ secrets.TF_SSH_KEY }}

jobs:
  lint-and-build:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
    
    - name: Check Maven Wrapper
      run: |
        cd ${{ env.PROJECT_DIR }}
        chmod +x ./mvnw
        ./mvnw --version
    
    - name: Lint and build
      run: |
        cd ${{ env.PROJECT_DIR }}
        ./mvnw clean package -DskipTests
      if: github.event_name == 'pull_request'
    
    - name: Build and prepare artifact
      run: |
        cd ${{ env.PROJECT_DIR }}
        ./mvnw clean package -DskipTests
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        COMMIT_HASH=$(git rev-parse --short HEAD)
        ARTIFACT_NAME="webbooks-${TIMESTAMP}-${COMMIT_HASH}.jar"
        mv target/*.jar ${ARTIFACT_NAME}
        echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_ENV
      if: github.event_name == 'push'
    
    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: webbooks-jar
        path: ${{ env.PROJECT_DIR }}/${{ env.ARTIFACT_NAME }}
      if: github.event_name == 'push' && env.ARTIFACT_NAME != ''

  deploy-to-s3:
    needs: lint-and-build
    runs-on: ubuntu-22.04
    if: github.event_name == 'push'
    
    steps:
    - name: Download artifact
      uses: actions/download-artifact@v3
      with:
        name: webbooks-jar
        
    - name: Configure AWS CLI
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.YC_ACCESS_KEY }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.YC_SECRET_KEY }}
      run: |
        mkdir -p ~/.aws
        echo "[default]
        region = ru-central1
        s3 =
          endpoint_url = https://${{ env.S3_ENDPOINT }}
          signature_version = s3v4" > ~/.aws/config
        
        echo "[default]
        aws_access_key_id = $AWS_ACCESS_KEY_ID
        aws_secret_access_key = $AWS_SECRET_ACCESS_KEY" > ~/.aws/credentials
    
    - name: Upload to Yandex Cloud Storage
      run: |
        aws --endpoint-url=https://${{ env.S3_ENDPOINT }} s3 cp \
          ${{ env.ARTIFACT_NAME }} \
          s3://${{ env.S3_BUCKET }}/artifacts/
        echo "S3_PATH=s3://${{ env.S3_BUCKET }}/artifacts/${{ env.ARTIFACT_NAME }}" >> $GITHUB_ENV

  deploy-infrastructure:
    needs: deploy-to-s3
    runs-on: ubuntu-22.04
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: '1.5.7'
    
    - name: Deploy infrastructure
      env:
        TF_VAR_artifact_path: ${{ env.S3_PATH }}
        TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      run: |
        ssh -o StrictHostKeyChecking=no -i ${{ env.TF_SSH_KEY }} ubuntu@${{ env.TF_VM_IP }} "
          cd ~/terraform-webbooks
          terraform init
          terraform apply -auto-approve
        "
    
    - name: Verify deployment
      run: |
        FRONTEND_IP=$(ssh -i ${{ env.TF_SSH_KEY }} ubuntu@${{ env.TF_VM_IP }} "terraform output -raw frontend_url")
        echo "Application URL: $FRONTEND_IP"
        curl -I $FRONTEND_IP

  notify:
    needs: deploy-infrastructure
    runs-on: ubuntu-22.04
    if: always()
    
    steps:
    - name: Send notification
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_COLOR: ${{ job.status == 'success' && '#36a64f' || '#ff0000' }}
        SLACK_TITLE: 'Webbooks Deployment ${{ job.status }}'
        SLACK_MESSAGE: |
          *Commit*: ${{ github.sha }}
          *Result*: ${{ job.status }}
          *Workflow*: ${{ github.workflow }}
          *URL*: ${{ needs.deploy-infrastructure.outputs.frontend_url }}
      if: github.event_name == 'push'
